### Structure

```js

import React from 'react'
import ReactDOM from 'react-dom/client'


const BookList = () => {

    return <section>
        <Book/>
        <Book/>

    </section>
}

const Book = () => {
    return <article>
        <Image/>
        <Title/>
        <Author/>
    </article>
}

const Image = () => <h2> Image Place Holder</h2>
const Title = () => <h2> Book Title </h2>
const Author = () => {
    return <h4>Author</h4>
}
const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<BookList/>)   

```

- in search engine type - 'amazon best selling books'
[Amazon Best Sellers] (https://www.amazon.com/Best-Sellers-Books/zgbs/books/)
- Don't Need to Buy Anything
- Not an Affiliate Link !!!
- Choose a books
- copy image, title and Author

```js


### CSS

- create index.css in src

```css
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', Sans-serif;
    background: #f1f5f8;
    color: #222
}

.booklist{
    width: 90vw;
    max-width: 1170px;
    margin: 5rem auto;
    display: grid;
    gap: 2rem;
}

@media screen and (min-width: 768px){
    .booklist{
        grid-template-columns: repeat(3, 1fr);
    }
}

.book{
    background: #fff;
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    position: relative;
}

.book img{
    width: 100%;
    object-fit: cover;
}
.book h2{
    margin-top: 1rem;
    font-size: 1rem;
}
.number{
    position: absolute;
    top: 0;
    left: 0;
    font-size: 1rem;
    padding: 0.75rem;
    border-top-left-radius: 1rem;
    border-bottom-right-radius: 1rem;
    background-color: #c35600;
    color: #fff;
}
h1{
    text-align: center;
    margin-top: 4rem;
    text-transform: capitalize;
}
```

### Local Images (Public Folder)

- Optional Video !!!

- external images (hosted on different server) - just need an url
- local images (public folder) - less performant
- local images (src folder) - better solution for assets, 
   since under the hood they get optimized.

- save image (Save Image As....)
- Create images folder in public
- Copy/paste images
- rename (optional)
- replace url in the src-'./images/imageName.extension'
- './' because assets are on the same server

- What ever assets we place in public - instantly available
- domin(localhost)/asset
```js

const Image = () => (
    <img src="./images/book-1.jpg" alt="Interesting Facts fFor Curious Mind" />
)
```

### JSX - CSS (inline Styles)

- style prop
- {} in JSX means going back to JS Land
- value is an object with key/value pairs - capitalized and with ''

```js
const Author = ()  => (
    <h4 style={{color: '#617d98', fontSize: '0.75rem', marginTop: '0.5rem'}}>
    Jorden Moore
    </h4>

);

- CSS rules still apply (inline vs external css)

```css

.book h4{
    /* won't work */
    color: red;
    /* will work */
    letter-spacing: 2px;
}
```
- external libraries use inline css,
  so if you want to make some changes,
  reference the library docs and elements tab

- alternative option

```js

const Author = () => {
    const inlineHeadingStyles = {
    color: '#617d98',
    fontSize: '0.75rem',
    marginTop: '0.5rem',
};
    return <h4 style={inlineHeadingStyles}> Jorden Moore </h4>;
};

- FOR THE MOST PART, MULTIPLE APPROCHES AVAILABLE !!!
- AS LONG AS THE RESULT IS THE SAME, REALLY COMES DOWN TO PREFERENCE !!!

### JSX - Javascript

- refactor to single book component (personal preference)
- remove inline css

```js
const Book = () => {
    return (
        <article className='book'>
            <img
                src='./images/book-1.jpg'
                alt='Interesting Facts For Curious Minds '
            />
            <h2> Interesting Facts For Curious Minds </h2>
            <h4> Jorden Moore </h4>
        </article>
    )
}

```css
.book h4{
    color: #617d98;
    font-size: 0.75rem;
    margin-top: 0.5rem;
    letter-spacing: 2px;
}

```
- {} in JSX means going back to JS Land
- value inside must be an expression (return value), 
  can't be a statement

```js

const author = 'Jordan Moore'
const Book = () => {
    const title = 'Interesting Facts For Curious Mindssssss';

    return (
        <article className='book'>
           <img
                src='./images/book-1.jpg'
                alt='Interesting Facts For Curious Minds '
            />
            <h2> {title} </h2>
            <h4>{author.toUpperCase()}</h4>
            {/* let x = 6 */ }

    )
}

### Props - Initial Setup

- refactor/clean up 

```js

const author = 'Jordan Moore';
const title = 'Interesting Facts For Curious Minds';
const img = './images/book-1.jpg';

function BookList() {

    return(
        <section className='booklist'>
            <Book />
            <Book />
        </section>
    );
}

const Book = () => {

    return (
        <article className='book'>
        <img src={img} alt={title} />
        <h2> {title} </h2>
        <h4> {author} </h4>
    )
}

```js
// parameters

const someFunc = (param1, param2) => {
    console.log(param1, param2)
}

// arguments 

someFunc('job', 'Developer')

```js
const Book = (props) => {
    console.log(props);
    return (
        <article className='book'>
            <img src={props.img} alt={props.title}/>
            <h2> {props.title} </h2>
            <h4> {props.author} </h4>
        </article>
    )
}


### Props - Somewhat Dyanmic Setup

- setup an object
- refactor vars to properties
- copy/paste and rename
- get values for second book
- setup props

``` js

const firstBook = {
    author: 'Jordan Moore',
    title: 'Interesting Facts For Curious Minds',
    img: './images/book-1.jpg'
    
};
const secondBook = {
    author: 'James Clear',
    title: 'Atomic Habits',
    img: './images/book-2.jpg'
    
};

### Access Props -  Multiple APPROACHES

- there is no right or wrong - again preference !!!

- Destructuring (object)

- for reference check about object destructuring in youtube.

- destructuring in vanilla JS
- saves time/typing
- pull out the properties
- don't need to reference object anymore

``` js
const someObject = {

    name: 'john',
    job: 'Developer',
    location: 'florida',
};

console.log(someObject.name)
const {name, job} = someObject;
console.log(job)
```

- no need for all the props.propName
- destructure inside component


```js
const Book = (props) => {
    const {img, title, author} = props;
    return (
        <article className = 'book'>
        <img src={img} alt={title}/>
        <h2> {title} </h2>
        <h4> {author} </h4>
        </article>
    );
};

```js
const Book = ({img, title, author}) => {
    
    return (
        <article className = 'book'>
        <img src={img} alt={title}/>
        <h2> {title} </h2>
        <h4> {author} </h4>
        </article>
    );
};

### Children Props
- everything we render between component tags
- during the course we will mostly use it context API
- special prop, has to be "children"
- can place anywhere in JSX

```js

function BookList(){
    return(
        <section className='booklist'>
        <Book
            author={firstBook.author}
            title={firstBook.title}
            img={firstBook.img}
        >
        <p>
           lorem10
        </p>
    )
}


const Book = ({img, title, author, children}) => {
    // console.log(props);
    // const {img, title, author} = props;
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2> {title} </h2>
            <h4> {author} </h4>
            <p>{children}</p>
        </article>
    )
}

### Simple list

- [Javascript Nuggets - Map ] reference check in youtube.

- refactor

```js

const books = [

    {
    author: 'Jordan Moore',
    title: 'Interesting Facts For Curious Minds',
    img: './images/book-1.jpg'
    },
     {
    author: 'James Clear',
    title: 'Atomic Habits',
    img: './images/book-2.jpg'
    
    }
];

function BookList() {
    return <section className='booklist'>
     {books.map((book)=>{
        console.log(book);
        // return 'hello';
        return (
            <div>
              <h2> {book.title} </h2>
            </div>

        );
     })}
    </section>;
}
const Book = (props) => {

}
```
- map - creates a new array from calling a function for every array element.

```js

const names = ['john', 'peter', 'susan'];
const newNames = names.map((name) => {
    console.log(name)
    return <h1>{name}</h1>
})

function BookList(){
    return <section className='booklist'>{newNames}</section>;
}
```js
const BookList = () => {

    return <section className="booklist">{books.map((book) => {
        console.log(book);
        const {img, title, author} = book;
        return(
        <Book author={author} title={title} img={img} />
    )}
        
    )}</section>
       
}
```
### Key Prop

- typically it's going to be id

```js
const books = [

    {
    author: 'Jordan Moore',
    title: 'Interesting Facts For Curious Minds',
    img: './images/book-1.jpg',
    id: 1,
    },
     {
    author: 'James Clear',
    title: 'Atomic Habits',
    img: './images/book-2.jpg'
    id: 2,
    }
];

const BookList = () => {

    return <section className="booklist">{books.map((book) => {
        console.log(book);
        const {img, title, author, id} = book;
        return(
        <Book book={book} key={id} />
    )}
        
    )}</section>
       
}
```
- You will see index, but it's not advised if the list is changing

```js
const BookList = () => {

    return <section className="booklist">{books.map((book, index) => {
        console.log(book);
        const {img, title, author} = book;
        return(
        <Book book={book} key={index} />
    );}
        
    )}</section>
       
}

```
### Pass The Entire Object

- render component
- pass entire object
- Destructuring (object)

check allow those reference videos in youtube

```js
const BookList = () => {

    return <section className="booklist">{books.map((book, index) => {
        console.log(book);
        const {img, title, author} = book;
        return(
        <Book book={book} />
    );}
        
    )}</section>
       
}
const Book = (props) => {
    // console.log(props);
    const {img, title, author} = props.book;
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2> {title} </h2>
            <h4> {author} </h4>
        </article>
    )
}
```
- alternative

```js
const Book = ({book: {img, title, author}}) => {
    // console.log(props);
    const {img, title, author} = props.book;
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2> {title} </h2>
            <h4> {author} </h4>
        </article>
    )
}
```

### My Personal preference

- utilize spread operator (...) - copy values
- Spread Operator

```js
const friends = ['john', 'peter', 'anna'];
const newFriends = [...friends, 'susan'];

const someObject = {
    name: 'john',
    job: 'Developer',
}

// Copy Not a Reference !!!

const newObject = {...someObject, location: 'florida'}
console.log(someObject)
console.log(someObject)
```

```js

function BookList() {
    return (
        <section className='booklist'>
        {
            books.map((book) => {
                return <Book {...book}  key={book.id}
            })
        }

    )
}

### Events - Fundamentals

- Vanilla JS

```js

const btn = document.getElementById('btn');

btn.addEventListener('click', function(e){
    // access event object
    // do something when event fires
})
```

- similar APPROACH
- element, event, function 
- again camelCase

```js

const EventExamples = () => {
    const handleButtonClick = () => {
        alert('handle Button Click')
    };

    return (

        <section>
            <button onClick={handleButtonClick}> Click ME </button>
        </section>
    );
};

```
- React Events - Refer Events handling in react through youtube reference
- no need to memorize them (idea is the same)
- most common
    - onClick (click events) 
    - onSubmit (submit form)
    - onChange (input Change)
```js
function BookList() {

    return (
        <section className = 'booklist'>
            <EventExamples />
            {book.map((book) => {
                return <Book {...book} key = {book.id} />;
            })}
        </section>
    );
}

const EventExamples = () => {
    const handleFormInput = () => {
        console.log('handle form input');

    };
    const handleButtonClick = () => {
        alert('handle button click');

    };
    return(
        <section>
            <form>
                <h2> Typical Form </h2>
                <input type='text' name='example' onChange={handleFormInput} style={{margin: '1rem 0'}} />
            </form>
            <button onClick={handleButtonClick}> Click Me </button>
        </section>
            
    );
};
```
### Event Object and Form Submission

```js

const EventExamples = () => {
    
    const handleFormInput = (e) => {
        console.log(e)
    }
    // e.target -element
    console.log(`Input Name : ${e.target.name}`);
    console.log(`Input Value: ${e.target.value}`);
    // console.log('handle form input')



const handleButtonClick = () => {
    alert('handle button click')
};

const handleFormSubmission = (e) => {
    e.preventDefault();
    console.log('form submitted')
};

return(
    <section>
    {/* add onSubmit Event Handler */}
    <form onSubmit={handleFormSubmission}>
   
        <h2> Typical Form </h2>
        <input type='text' name='example' onChange={handleFormInput} style={{margin: '1rem 0'}} />
        <button type='submit'> Submit </button>
        <div>
        <button onClick={handleButtonClick}> Click Me </button>
        </div>
    </form>
    </section>      
   )
}

### Mind Grenade

- alternative APPROACH
- pass anonymous function (in this case arrow function)
- one liner - less code

```js
const EventExamples = () => {
    
    return(
          <section>
    {/* add onSubmit Event Handler */}
    <form onSubmit={handleFormSubmission}>
   
        <h2> Typical Form </h2>
        <input type='text' name='example' onChange={(e) => console.log(e.target.value)} style={{margin: '1rem 0'}} />
    </form>
    <button onClick={() => console.log('hello there')}> Click Me</button>
    </section>
    );
}

```

### Mind Grenade #2

- remove EventsExamples
- components are independent by default

```js
function BookList(){
    return(
        <section className='booklist'>
            {books.map((book)=>{
                return <Book {...book} key={book.id} />;
            })}
    );

}


const Book = (props) => {
    const {img, title, author} = props;
    const displayTitle = () => {
        console.log(title);
    }
     return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2> {title} </h2>
            <button onClick={displayTitle}>Display Title</button>
            <h4> {author} </h4>
        </article>
    )
}
```

- remove button

### prop Drilling

- react data flow - can only pass props DOWN
- alternatives context API, redux, other state libraries 

```js
function BookList() {
    const someValue = 'shakeAndBake';
    const displayValue = () => {
        console.log(someValue)
    };

    return (
        <section className='booklist'>
        {books.map((book) => {
            return <Book {...book} key={book.id} displayValue={displayValue} />;

        })}
        </section>
    );  
}

const Book = (props) => {

    const {img, title, author, displayValue} = props;

    return(
        <article className='book'>
        <img src={img} alt={title} />
        <h2> {title} </h2>
        <button onClick={displayValue}> Click Me </button>
        <h4> {author} </h4>
    );
};

```
#### More Complex example

- initial setup
- create getBook function in booklist
- accept id as an argument and finds the book
- [javascript nuggets - filter and Find] - find this concept in youtube and go through it.
- pass the function down to Book Component and invoke on the button click
- in the Book Component destructure id and function
- Invoke the function when user clicks the button, pass the id
- the goal : you should see the same book in the console


```js
const BookList = () => {
    const getBook = (id) => {
        const book = books.find((book)=> book.id === id);
    }
    return <section className="booklist">
        {books.map((book) => {
        console.log(book);
        
        return  <Book {...book} key={book.id} getBook={getBook} />
       })}
       
    </section>
}

const Book = (props) => {
   const {img, title, author, getBook, id} = props;

    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2> {title} </h2>
            <button onClick={getBook(id)}>Display Title</button>
            <h4> {author} </h4>
        </article>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<BookList/>)   

```
- two fixes
- first option - setup wrapper

```js
const Book = (props) => {
   const {img, title, author, getBook, id} = props;

    const getSingleBook = () => {
        getBook(id);
    }
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2> {title} </h2>
            <button onClick={getSingleBook}>Display Title</button>
            <h4> {author} </h4>
        </article>
    );
};
``` 
- two fixes
- second option - wrap in the anonymous arrow function

``` js
const Book = (props) => {

    const {img, title, author, getBook, id} = props;
    // console.log(props)
    const getSingleBook = () => {
        getBook(id);
    };

    return(
        <article className='book'>
        <img src={img} alt={title} />
        <h2> {title} </h2>
        <button onClick={() => getBook(id)}> display title </button>
        <h4> {author} </h4>
        </article>

    );
};
```
### Import and Export statements

- remove all getBook code

```js

function BookList() {

    return (
        <section className='booklist'>
            {books.map((book) => {
                return <Book {...book} key={book.id} />;
            })}
            </section>
            )
}

const Book = (props) => {

    const {img, title, author} = props;

    return (
        <article className='book'>
        <img src={img} alt={title} />
        <h2> {title} </h2>
        </article>
    );
};

```
- setup two files in src books.js and Book.js
- cut books array from index.js
- add to books.js

```js

const books = [

    {
    author: 'Jordan Moore',
    title: 'Interesting Facts For Curious Minds',
    img: './images/book-1.jpg',
    id: 1,
    },
     {
    author: 'James Clear',
    title: 'Atomic Habits',
    img: './images/book-2.jpg',
    id: 2,
    
    }
];

```

#### Local Images  (src folder)

- better performance because optimized
- add one more book to array
- download all three images (rename)
- setup images folder in the src
- import all three  images in the book.js
- set image property equal to import
- and yes each image requires new import 

```js

import img1 from './images/book-1.jpeg'
import img2 from './images/book-2.jpeg'
import img3 from './images/book-3.jpeg'

export const books = [
    {
    author: 'Jordan Moore',
    title: 'Interesting Facts For Curious Minds',
    img: './images/book-1.jpg',
    id: 1,
    },
     {
    author: 'James Clear',
    title: 'Atomic Habits',
    img: './images/book-2.jpg',
    id: 2,
    },
    {
        author: 'Jimmy Niro',
        title: 'Dad Jokes',
        img: img3,
        id: 3,
        
    }
]

```
### Challenges

- setup numbers
- don't worry about css
- hit - index (second parameter in map)

```js
const BookList = () => {
   
    return( 
    <section className="booklist">
        {books.map((book, index) => {
        return  <Book {...book} key={book.id} number={index}/>;
       })}
       
    </section>
    );
}


#### Add Title

- Add a title to our app (CSS optional)
- change page title

index.js

```js

function BookList() {

    return(
        <>
            <h1> Amazon Best Sellers </h1>
            <section className='booklist'>
            {books.map((book) => {
                return <Book {...book} key={book.id} />;
            })}
            </section>
        </>
    );
}
```
#### Build Production Application

- stop the dev server "ctril + c"
- run "npm run build"
- build folder gets created


### Netlify

- sign up
- add new site/deploy manually
- choose build folder
- rename site - site settings/change site name